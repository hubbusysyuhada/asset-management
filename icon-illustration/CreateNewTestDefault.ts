class CreateNewTestDefault extends HTMLElement {
  id = "talentics-icon-" + (Math.random() + 1).toString(36).substring(5);
  props = ['size', 'color']
  contentStyle = '';
  colorStyle = '';
  size = ''
  color = ''
  constructor() {
    super()
    this._initElement()
    const shadowRoot = this.attachShadow({mode: 'closed'});
    shadowRoot.innerHTML = `<svg style="${this.contentStyle}" width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4 46.7292H37.9157V11.8008L29.1024 3H4V46.7292Z" fill="#E8E8E8"/>
<path d="M37.9158 11.8008H29.1024V3" fill="#D1D1D2"/>
<path d="M25.4762 14.7661H17.1754C16.8004 14.7661 16.5004 14.4661 16.5004 14.0911C16.5004 13.716 16.8004 13.416 17.1754 13.416H25.4762C25.8513 13.416 26.1513 13.716 26.1513 14.0911C26.1513 14.4661 25.8513 14.7661 25.4762 14.7661Z" fill="#989899"/>
<path d="M14.1301 26.3784H8.84206C8.46702 26.3784 8.16699 26.0783 8.16699 25.7033V20.4153C8.16699 20.0403 8.46702 19.7402 8.84206 19.7402H14.1301C14.5051 19.7402 14.8051 20.0403 14.8051 20.4153V25.7033C14.7926 26.0783 14.4926 26.3784 14.1301 26.3784ZM9.50462 25.0407H13.455V21.0904H9.50462V25.0407Z" fill="#989899"/>
<path d="M33.0692 22.128H18.7554C18.3804 22.128 18.0803 21.8279 18.0803 21.4529C18.0803 21.0779 18.3804 20.7778 18.7554 20.7778H33.0818C33.4568 20.7778 33.7568 21.0779 33.7568 21.4529C33.7443 21.8279 33.4443 22.128 33.0692 22.128Z" fill="#989899"/>
<path d="M30.269 25.3409H18.7554C18.3804 25.3409 18.0803 25.0408 18.0803 24.6658C18.0803 24.2908 18.3804 23.9907 18.7554 23.9907H30.269C30.644 23.9907 30.944 24.2908 30.944 24.6658C30.9315 25.0408 30.6315 25.3409 30.269 25.3409Z" fill="#989899"/>
<path d="M30.269 36.6411H18.7554C18.3804 36.6411 18.0803 36.3411 18.0803 35.9661C18.0803 35.591 18.3804 35.291 18.7554 35.291H30.269C30.644 35.291 30.944 35.591 30.944 35.9661C30.9315 36.3411 30.6315 36.6411 30.269 36.6411Z" fill="#989899"/>
<path d="M11.9923 24.1288C11.8173 24.1288 11.6423 24.0538 11.5173 23.9288L10.2422 22.6536C9.97966 22.3911 9.97966 21.9661 10.2422 21.7035C10.5047 21.441 10.9297 21.441 11.1923 21.7035L11.9423 22.4536L14.7551 18.8783C14.9801 18.5907 15.4052 18.5407 15.6927 18.7658C15.9802 18.9908 16.0302 19.4158 15.8052 19.7034L12.5299 23.8662C12.4174 24.0163 12.2299 24.1038 12.0424 24.1163C12.0299 24.1288 12.0048 24.1288 11.9923 24.1288Z" fill="#D1D1D2"/>
<path d="M14.1301 37.8374H8.84206C8.46702 37.8374 8.16699 37.5373 8.16699 37.1623V31.8743C8.16699 31.4992 8.46702 31.1992 8.84206 31.1992H14.1301C14.5051 31.1992 14.8051 31.4992 14.8051 31.8743V37.1623C14.7926 37.5498 14.4926 37.8374 14.1301 37.8374ZM9.50462 36.4997H13.455V32.5493H9.50462V36.4997Z" fill="#989899"/>
<path d="M33.0692 33.5874H18.7554C18.3804 33.5874 18.0803 33.2874 18.0803 32.9124C18.0803 32.5373 18.3804 32.2373 18.7554 32.2373H33.0818C33.4568 32.2373 33.7568 32.5373 33.7568 32.9124C33.7568 33.2874 33.4443 33.5874 33.0692 33.5874Z" fill="#989899"/>
<path d="M11.9926 35.5868C11.8176 35.5868 11.6426 35.5118 11.5175 35.3868L10.2424 34.1116C9.9799 33.8491 9.9799 33.4241 10.2424 33.1616C10.505 32.899 10.93 32.899 11.1925 33.1616L11.9426 33.9116L14.7554 30.3363C14.9804 30.0488 15.4054 29.9987 15.6929 30.2238C15.9805 30.4488 16.0305 30.8738 15.8055 31.1614L12.5301 35.3243C12.4176 35.4743 12.2301 35.5618 12.0426 35.5743C12.0301 35.5868 12.0051 35.5868 11.9926 35.5868Z" fill="#D1D1D2"/>
<path d="M44.9374 14.5863L32.713 33.6731L26.7788 37.4223L27.7007 30.4633L39.9252 11.3765C40.2793 10.8333 41.0025 10.6688 41.5457 11.023L44.5839 12.9658C45.1271 13.32 45.2916 14.0431 44.9374 14.5863Z" fill="#989899"/>
<path d="M32.7132 33.6722L26.779 37.4214L26.8494 36.8828L27.7009 30.4624L32.7132 33.6722Z" fill="#E8E8E8"/>
<path d="M44.9381 14.5869L42.5774 18.2839L37.5652 15.0741L39.9258 11.3771C40.28 10.8338 41.0031 10.6694 41.5463 11.0235L44.5845 12.9664C45.1277 13.3205 45.2922 14.0437 44.9381 14.5869Z" fill="#E8E8E8"/>
</svg>
`
  }

  attributeChangedCallback(name: string, _: string, newValue: string) {
    this._setState();
  }

  connectedCallback() {
    this._setState();
  }
  
  disconnectedCallback() {
    this._setState();
  }

  _initElement() {
    this._setState()
    const size = this.size || 24
    let contentStyle = `object-fit: content; width: ${size}; height: ${size}`
    this.contentStyle = contentStyle
    if (this.color) this.colorStyle = `fill: ${this.color}`
  }

  _setState() {
    // @ts-ignore
    this.props.forEach(key => this[key as keyof typeof CreateNewTestDefault] = this.getAttribute(key));
  }
}
export default CreateNewTestDefault